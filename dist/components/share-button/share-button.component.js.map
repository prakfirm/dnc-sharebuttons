{"version":3,"sources":["../../inlined/components/share-button/share-button.component.ts"],"names":[],"mappings":";;AAAA,sCAAgG;AAIhG;IAAA;QAWI,sCAAsC;QACrC,cAAS,GAAY,KAAK,CAAC;QAC5B,0DAA0D;QACzD,UAAK,GAAG,IAAI,mBAAY,EAAU,CAAC;QACpC,0BAA0B;QACzB,gBAAW,GAAG,IAAI,mBAAY,EAAiB,CAAC;IAoCrD,CAAC;IA/BG,sCAAO,GAAP,UAAQ,KAAa;QACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,+EAA+E;IAC/E,0CAAW,GAAX,UAAY,QAAuB;QAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEE,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,cAAc;oBACxB,QAAQ,EAAE,grBAAgrB;oBAC1rB,eAAe,EAAE,8BAAuB,CAAC,MAAM;iBAClD,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,mCAAc,GAA2C;QAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QACzB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC3B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QACjC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC3B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC1B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC5B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAC/B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;QAC5B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;KACjC,CAAC;IACF,2BAAC;CApDD,AAoDC,IAAA;AApDY,oDAAoB","file":"share-button.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { ShareButton, ShareProvider } from '../../helpers/index';\n\n\nexport class ShareButtonComponent {\n\n    /** Share Args */\n     url: string;\n     title: string;\n     description: string;\n     image: string;\n     tags: string;\n\n    /** Button type e.g. fb, twitter, reddit...etc */\n     button: ShareButton;\n    /** Show count, disabled by default */\n     showCount: boolean = false;\n    /** Output button count to calculate total share counts */\n     count = new EventEmitter<number>();\n    /** Output pop up closed*/\n     popUpClosed = new EventEmitter<ShareProvider>();\n\n    /** Share count for this button */\n    shareCount: number;\n\n    counter(count: number) {\n        this.shareCount = count;\n        this.count.emit(count);\n    }\n\n    /** emits closed button type: so user can tell which button has been clicked */\n    shareClosed(provider: ShareProvider) {\n        this.popUpClosed.emit(provider);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'share-button',\n    template: \"\\n      <button [shareButton]=\\\"button.provider\\\"\\n              [sbUrl]=\\\"url\\\"\\n              [sbImage]=\\\"image\\\"\\n              [sbTitle]=\\\"title\\\"\\n              [sbDescription]=\\\"description\\\"\\n              [sbTags]=\\\"tags\\\"\\n              [sbShowCount]=\\\"showCount\\\"\\n              (sbCount)=\\\"counter($event)\\\"\\n              (sbPopUpClosed)=\\\"shareClosed($event)\\\"\\n              [class.sb-show-count]=\\\"showCount\\\"\\n              [attr.aria-label]=\\\"button.provider\\\">\\n\\n        <div class=\\\"sb-template\\\" [innerHtml]=\\\"button.template\\\"></div>\\n        <span *ngIf=\\\"showCount && shareCount\\\" class=\\\"sb-count\\\">{{ shareCount | nFormatter: 1 }}</span>\\n      </button>\\n    \",\n    changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'url': [{ type: Input },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'button': [{ type: Input },],\n'showCount': [{ type: Input },],\n'count': [{ type: Output },],\n'popUpClosed': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}