{"version":3,"sources":["../inlined/helpers/n-formatter.pipe.ts"],"names":[],"mappings":";;AAAA,sCAAoD;AACpD,iCAAiC;AAGjC;IAAA;IAmBA,CAAC;IAjBG,kCAAS,GAAT,UAAU,GAAQ,EAAE,MAAY;QAE5B,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,cAAM,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAEE,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC;oBACjB,IAAI,EAAE,YAAY;iBACrB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,qBAAC;CAnBD,AAmBC,IAAA;AAnBY,wCAAc","file":"n-formatter.pipe.js","sourceRoot":"","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Helper } from './index';\n\n\nexport class NFormatterPipe implements PipeTransform {\n\n    transform(num: any, digits?: any): any {\n\n        if (typeof num !== 'number') {\n            throw new Error('A number is expected for nFormatter');\n        }\n\n        return Helper.nFormatter(num, digits);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n    name: 'nFormatter'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}